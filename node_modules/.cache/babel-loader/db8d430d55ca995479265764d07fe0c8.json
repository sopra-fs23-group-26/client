{"ast":null,"code":"import _asyncToGenerator from \"/home/heqing/Downloads/SELAB/M3/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/home/heqing/Downloads/SELAB/M3/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/home/heqing/Downloads/SELAB/M3/client/src/components/views/Platform.js\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/home/heqing/Downloads/SELAB/M3/client/node_modules/@babel/runtime/regenerator/index.js\";\nimport { useEffect, useState } from 'react';\nimport { api, handleError } from 'helpers/api';\nimport { Spinner } from 'components/ui/Spinner';\nimport { Button } from 'components/ui/Button';\nimport { useHistory } from 'react-router-dom';\nimport BaseContainer from \"components/ui/BaseContainer\";\nimport PropTypes from \"prop-types\";\nimport \"styles/views/Game.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Player = function Player(_ref) {\n  _s();\n\n  var user = _ref.user;\n  var history = useHistory();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player container\",\n    onClick: function onClick() {\n      return history.push(\"/profile?username=\".concat(user.username));\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player username\",\n      children: user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Player, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Player;\nPlayer.propTypes = {\n  user: PropTypes.object\n};\n\nvar Platform = function Platform() {\n  _s2();\n\n  // use react-router-dom's hook to access the history\n  var history = useHistory(); // define a state variable (using the state hook).\n  // if this variable changes, the component will re-render, but the variable will\n  // keep its value throughout render cycles.\n  // a component can have as many state variables as you like.\n  // more information can be found under https://reactjs.org/docs/hooks-state.html\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var logout = function logout() {\n    var userinfo = JSON.parse(localStorage.getItem('userinfo'));\n    api.post('/logout/' + userinfo.username);\n    localStorage.removeItem('token');\n    history.push('/');\n  };\n\n  var gotoProfile = function gotoProfile() {}; // the effect hook can be used to react to change in your component.\n  // in this case, the effect hook is only run once, the first time the component is mounted\n  // this can be achieved by leaving the second argument an empty array.\n  // for more information on the effect hook, please see https://reactjs.org/docs/hooks-effect.html\n\n\n  useEffect(function () {\n    // effect callbacks are synchronous to prevent race conditions. So we put the async function inside:\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return api.get('/users');\n\n              case 3:\n                response = _context.sent;\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 1000);\n                });\n\n              case 6:\n                // Get the returned users and update the state.\n                setUsers(response.data); // This is just some data for you to see what is available.\n                // Feel free to remove it.\n\n                console.log('request to:', response.request.responseURL);\n                console.log('status code:', response.status);\n                console.log('status text:', response.statusText);\n                console.log('requested data:', response.data); // See here to get more data.\n\n                console.log(response);\n                _context.next = 19;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(\"Something went wrong while fetching the users: \\n\".concat(handleError(_context.t0)));\n                console.error(\"Details:\", _context.t0);\n                alert(\"Something went wrong while fetching the users! See the console for details.\");\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 14]]);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, []);\n\n  var content = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 17\n  }, _this);\n\n  if (users) {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"game user-list\",\n        children: users.map(function (user) {\n          return /*#__PURE__*/_jsxDEV(Player, {\n            user: user\n          }, user.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, _this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(BaseContainer, {\n    className: \"game container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Platform\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n      width: \"100%\",\n      onClick: function onClick() {\n        return gotoProfile();\n      },\n      children: \"Profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n      width: \"100%\",\n      onClick: function onClick() {\n        return logout();\n      },\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, _this);\n};\n\n_s2(Platform, \"gVhM7zwTqCvaylmeuinf9UkR3Dg=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = Platform;\nexport default Platform;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Player\");\n$RefreshReg$(_c2, \"Platform\");","map":{"version":3,"sources":["/home/heqing/Downloads/SELAB/M3/client/src/components/views/Platform.js"],"names":["useEffect","useState","api","handleError","Spinner","Button","useHistory","BaseContainer","PropTypes","Player","user","history","push","username","propTypes","object","Platform","users","setUsers","logout","userinfo","JSON","parse","localStorage","getItem","post","removeItem","gotoProfile","fetchData","get","response","Promise","resolve","setTimeout","data","console","log","request","responseURL","status","statusText","error","alert","content","map","id"],"mappings":";;;;;;;;;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,GAAR,EAAaC,WAAb,QAA+B,aAA/B;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,wBAAP;;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAY;AAAA;;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACzB,MAAMC,OAAO,GAAGL,UAAU,EAA1B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAkC,IAAA,OAAO,EAAE;AAAA,aAAMK,OAAO,CAACC,IAAR,6BAAkCF,IAAI,CAACG,QAAvC,EAAN;AAAA,KAA3C;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBAAmCH,IAAI,CAACG;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAPD;;GAAMJ,M;UACYH,U;;;KADZG,M;AASNA,MAAM,CAACK,SAAP,GAAmB;AACjBJ,EAAAA,IAAI,EAAEF,SAAS,CAACO;AADC,CAAnB;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA;;AACrB;AACA,MAAML,OAAO,GAAGL,UAAU,EAA1B,CAFqB,CAIrB;AACA;AACA;AACA;AACA;;AACA,kBAA0BL,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOgB,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAf;AACAtB,IAAAA,GAAG,CAACuB,IAAJ,CAAS,aAAaL,QAAQ,CAACP,QAA/B;AACAU,IAAAA,YAAY,CAACG,UAAb,CAAwB,OAAxB;AACAf,IAAAA,OAAO,CAACC,IAAR,CAAa,GAAb;AACD,GALD;;AAOA,MAAMe,WAAW,GAAG,SAAdA,WAAc,GAAM,CAAE,CAA5B,CAlBqB,CAoBrB;AACA;AACA;AACA;;;AACA3B,EAAAA,SAAS,CAAC,YAAM;AACd;AADc,aAEC4B,SAFD;AAAA;AAAA;;AAAA;AAAA,4EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAE2B1B,GAAG,CAAC2B,GAAJ,CAAQ,QAAR,CAF3B;;AAAA;AAEUC,gBAAAA,QAFV;AAAA;AAAA,uBAOU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,yBAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;AAAA,iBAAnB,CAPV;;AAAA;AASI;AACAd,gBAAAA,QAAQ,CAACY,QAAQ,CAACI,IAAV,CAAR,CAVJ,CAYI;AACA;;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BN,QAAQ,CAACO,OAAT,CAAiBC,WAA5C;AACAH,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,QAAQ,CAACS,MAArC;AACAJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,QAAQ,CAACU,UAArC;AACAL,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BN,QAAQ,CAACI,IAAxC,EAjBJ,CAmBI;;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AApBJ;AAAA;;AAAA;AAAA;AAAA;AAsBIK,gBAAAA,OAAO,CAACM,KAAR,4DAAkEtC,WAAW,aAA7E;AACAgC,gBAAAA,OAAO,CAACM,KAAR,CAAc,UAAd;AACAC,gBAAAA,KAAK,CAAC,6EAAD,CAAL;;AAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFc;AAAA;AAAA;;AA8Bdd,IAAAA,SAAS;AACV,GA/BQ,EA+BN,EA/BM,CAAT;;AAiCA,MAAIe,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,WAAd;;AAEA,MAAI1B,KAAJ,EAAW;AACT0B,IAAAA,OAAO,gBACL;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,gBAAd;AAAA,kBACG1B,KAAK,CAAC2B,GAAN,CAAU,UAAAlC,IAAI;AAAA,8BACb,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAEA;AAAd,aAAyBA,IAAI,CAACmC,EAA9B;AAAA;AAAA;AAAA;AAAA,mBADa;AAAA,SAAd;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF;AAUD;;AAED,sBACE,QAAC,aAAD;AAAe,IAAA,SAAS,EAAC,gBAAzB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI,QAAC,MAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMlB,WAAW,EAAjB;AAAA,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,eASI,QAAC,MAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMR,MAAM,EAAZ;AAAA,OAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aATJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAkBD,CA1FD;;IAAMH,Q;UAEYV,U;;;MAFZU,Q;AA4FN,eAAeA,QAAf","sourcesContent":["import {useEffect, useState} from 'react';\nimport {api, handleError} from 'helpers/api';\nimport {Spinner} from 'components/ui/Spinner';\nimport {Button} from 'components/ui/Button';\nimport {useHistory} from 'react-router-dom';\nimport BaseContainer from \"components/ui/BaseContainer\";\nimport PropTypes from \"prop-types\";\nimport \"styles/views/Game.scss\";\n\nconst Player = ({user}) => {\n  const history = useHistory();\n  return (\n    <div className=\"player container\" onClick={() => history.push(`/profile?username=${user.username}`)}>\n      <div className=\"player username\" >{user.username}</div>\n    </div>\n  )\n};\n\nPlayer.propTypes = {\n  user: PropTypes.object\n};\n\nconst Platform = () => {\n  // use react-router-dom's hook to access the history\n  const history = useHistory();\n\n  // define a state variable (using the state hook).\n  // if this variable changes, the component will re-render, but the variable will\n  // keep its value throughout render cycles.\n  // a component can have as many state variables as you like.\n  // more information can be found under https://reactjs.org/docs/hooks-state.html\n  const [users, setUsers] = useState(null);\n\n  const logout = () => {\n    let userinfo = JSON.parse(localStorage.getItem('userinfo'))\n    api.post('/logout/' + userinfo.username);\n    localStorage.removeItem('token');\n    history.push('/');\n  }\n\n  const gotoProfile = () => {}\n\n  // the effect hook can be used to react to change in your component.\n  // in this case, the effect hook is only run once, the first time the component is mounted\n  // this can be achieved by leaving the second argument an empty array.\n  // for more information on the effect hook, please see https://reactjs.org/docs/hooks-effect.html\n  useEffect(() => {\n    // effect callbacks are synchronous to prevent race conditions. So we put the async function inside:\n    async function fetchData() {\n      try {\n        const response = await api.get('/users');\n\n        // delays continuous execution of an async operation for 1 second.\n        // This is just a fake async call, so that the spinner can be displayed\n        // feel free to remove it :)\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Get the returned users and update the state.\n        setUsers(response.data);\n\n        // This is just some data for you to see what is available.\n        // Feel free to remove it.\n        console.log('request to:', response.request.responseURL);\n        console.log('status code:', response.status);\n        console.log('status text:', response.statusText);\n        console.log('requested data:', response.data);\n\n        // See here to get more data.\n        console.log(response);\n      } catch (error) {\n        console.error(`Something went wrong while fetching the users: \\n${handleError(error)}`);\n        console.error(\"Details:\", error);\n        alert(\"Something went wrong while fetching the users! See the console for details.\");\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  let content = <Spinner/>;\n\n  if (users) {\n    content = (\n      <div className=\"game\">\n        <ul className=\"game user-list\">\n          {users.map(user => (\n            <Player user={user} key={user.id}/>\n          ))}\n        </ul>\n\n      </div>\n    );\n  }\n\n  return (\n    <BaseContainer className=\"game container\">\n        <h2>Game Platform</h2>\n        <Button\n          width=\"100%\"\n          onClick={() => gotoProfile()}\n        >\n          Profile\n        </Button>\n        \n        <Button\n          width=\"100%\"\n          onClick={() => logout()}\n        >\n          Logout\n        </Button>\n    </BaseContainer>\n  );\n}\n\nexport default Platform;\n"]},"metadata":{},"sourceType":"module"}